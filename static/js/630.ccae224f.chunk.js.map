{"version":3,"file":"static/js/630.ccae224f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts.module.css?8552","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form_contacts\":\"ContactForm_form_contacts__e25ZD\",\"label_contacts\":\"ContactForm_label_contacts__lzipz\",\"input_contacts\":\"ContactForm_input_contacts__9sBTW\",\"btn_contacts\":\"ContactForm_btn_contacts__F11WQ\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\n","import { useState } from 'react';\nimport css from 'components/ContactForm/ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operation';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  let nameId = nanoid();\n  let numberId = nanoid();\n\n  const handleChange = event => {\n    //   при введении данных в инпут записываем эти значения в качестве свойств и их значений\n    const { name, value } = event.currentTarget;\n\n    if (name === 'name') setName(value);\n\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n\n    // Забираем данные с контактами с глобального стэйта, и если имя уже было введено,\n    // какое мы снова вводим в инпуте, то выведется сообщение и выходим\n\n    const isExist = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    // если вводим имя контакта, какое уже есть в телеф.книге, выводим сообщение, что имя такое есть такое и выходим\n    if (isExist) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    //   иначе отправляем экшен с данными в глобальный стэйт контактов\n\n    dispatch(addContact({ name, number, id: nanoid() }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form_contacts} onSubmit={handleSubmitForm}>\n      <label className={css.label_contacts} htmlFor={nameId}>\n        Name\n        <input\n          className={css.input_contacts}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          required\n          onChange={handleChange}\n          id={nameId}\n        />\n      </label>\n      <label className={css.label_contacts} htmlFor={numberId}>\n        Number\n        <input\n          className={css.input_contacts}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n          id={numberId}\n        />\n      </label>\n      <button type=\"submit\" className={css.btn_contacts}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"button_contact\":\"ContactItem_button_contact__IsPs9\",\"item_contact\":\"ContactItem_item_contact__McLDe\",\"wrapper_contact\":\"ContactItem_wrapper_contact__fbYIf\"};","import css from 'components/ContactItem/ContactItem.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = contact;\n  return (\n    <div className={css.wrapper_contact}>\n      <li className={css.item_contact}>\n        {name}: {number}\n      </li>\n      <button\n        className={css.button_contact}\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  // записываем в отдельный массив контакты, которые отфильтровали для поиска из всех контактов по условию в инпуте\n  // , чтобы не менять исходный массив контактов\n  const visibleTelephone = getVisibleContacts();\n\n  return (\n    <ul>\n      {visibleTelephone.map(contact => {\n        return <ContactItem contact={contact} key={contact.id} />;\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label_filter\":\"Filter_label_filter__-5ECC\",\"title_filter\":\"Filter_title_filter__le8w2\",\"filter\":\"Filter_filter__vxThR\"};","import css from 'components/Filter/Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  // инфа с инпута пришла и записываем в глобальный стейт\n  const handleFilter = event => {\n    dispatch(filterContact(event.currentTarget.value));\n  };\n\n  return (\n    <label htmlFor=\"filterId\" className={css.label_filter}>\n      <p className={css.title_filter}>Find contacts by name</p>\n      <input\n        className={css.filter}\n        type=\"text\"\n        value={filter}\n        onChange={handleFilter}\n      />\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"pages\":\"Contacts_pages__UCsbF\",\"title_contact\":\"Contacts_title_contact__YdbFL\",\"pages_title\":\"Contacts_pages_title__dfo0R\"};","// import css from 'components/App.module.css';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from 'pages/Contacts.module.css';\nimport {\n  selectContacts,\n  selectError,\n  selectLoading,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { useEffect } from 'react';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isContacts = contacts.length > 0;\n  return (\n    // <div className={css.container}>\n    <div\n      className={css.pages_contact}\n      style={{\n        textAlign: 'center',\n      }}\n    >\n      <Helmet>\n        <h1 className={css.title_contact}>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div className={css.pages_wrapper}>\n        <h2 className={css.pages_title}>Contacts</h2>\n        {isContacts && <Filter />}\n      </div>\n\n      {isContacts && <ContactsList />}\n      {isLoading && !error && <b>Request in progress...</b>}\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","nameId","numberId","handleChange","event","currentTarget","value","reset","className","css","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContact","htmlFor","type","pattern","title","required","onChange","ContactItem","onClick","deleteContact","ContactsList","visibleTelephone","includes","map","Filter","filterContact","useEffect","fetchContacts","isContacts","length","style","textAlign","Helmet"],"sourceRoot":""}