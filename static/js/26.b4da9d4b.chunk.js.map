{"version":3,"file":"static/js/26.b4da9d4b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form_register\":\"RegisterForm_form_register__0QVW-\",\"label_register\":\"RegisterForm_label_register__eMODo\",\"input_register\":\"RegisterForm_input_register__IaOmZ\",\"btn_register\":\"RegisterForm_btn_register__YEAAa\"};","import { useDispatch } from 'react-redux';\nimport css from './RegisterForm.module.css';\nimport { register } from 'redux/auth/operation';\nimport { useState } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\n\nexport const RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  // –±—ã–ª–∏ –ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –∏–Ω–ø—É—Ç–∞\n  const [emailDirty, setEmailDirty] = useState(false);\n  const [passwordDirty, setPasswordDirty] = useState(false);\n  const [nameDirty, setNameDirty] = useState(false);\n  const [emailError, setEmailError] = useState('Email cannot be empty');\n  const [nameError, setNameError] = useState('Enter your name');\n  const [passwordError, setPasswordError] = useState(\n    'Password cannot be empty'\n  );\n\n  const dispatch = useDispatch();\n\n  // –≤–∞–ª–∏–¥–∞—Ü–∏—è name\n\n  const handleNameValidet = e => {\n    const { value } = e.currentTarget;\n    setName(value);\n    if (value.length < 1) {\n      setNameError('Enter full name');\n      if (!value) {\n        setNameError('Enter full name');\n      }\n    } else {\n      setNameError('');\n    }\n  };\n\n  // –≤–∞–ª–∏–¥–∞—Ü–∏—è Email\n\n  const handleEmailValidet = e => {\n    const { value } = e.currentTarget;\n    setEmail(value);\n\n    const re =\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    if (!re.test(String(value).toLowerCase())) {\n      setEmailError('Incorrect email');\n    } else {\n      setEmailError('');\n    }\n  };\n\n  // –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è\n\n  const handlePasswordValidet = e => {\n    const { value } = e.currentTarget;\n    setPassword(value);\n    if (value.length < 8) {\n      setPasswordError('Enter password more than 8 charactersl');\n      if (!value) {\n        setPasswordError('Enter password more than 8 charactersl');\n      }\n    } else {\n      setPasswordError('');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n    toast.success(`${name} congratulations you are registered`, {\n      position: 'top-right',\n      duration: 1000,\n      icon: 'üëè',\n      style: {\n        border: '5px solid #e5ccfd',\n        borderRadius: '50px',\n        background: '#ebffeb',\n        color: '#1a01d4',\n      },\n    });\n\n    reset();\n\n    // alert('–°ongratulations you are registered');\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleValid = e => {\n    const { name } = e.currentTarget;\n\n    // if (name === 'name') setNameDirty(true);\n    // if (name === 'email') setEmailDirty(true);\n    // if (name === 'password') setPasswordDirty(true);\n\n    // —á–µ—Ä–µ–∑ —Å–≤–∏—Ç—á\n    switch (name) {\n      case 'name':\n        setNameDirty(true);\n        break;\n      case 'email':\n        setEmailDirty(true);\n        break;\n      case 'password':\n        setPasswordDirty(true);\n        break;\n      default:\n    }\n  };\n\n  return (\n    <form\n      className={css.form_register}\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n    >\n      <Toaster />\n      {/* –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ name –∏ –≤ –∏–º–µ–Ω–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É*/}\n      {nameDirty && nameError && (\n        <div style={{ color: 'red' }}>{nameError}</div>\n      )}\n      <label className={css.label_register}>\n        Username\n        <input\n          required\n          onBlur={e => handleValid(e)}\n          className={css.input_register}\n          type=\"text\"\n          name=\"name\"\n          onChange={handleNameValidet}\n          value={name}\n        />\n      </label>\n\n      {emailDirty && emailError && (\n        <div style={{ color: 'red' }}>{emailError}</div>\n      )}\n      <label className={css.label_register}>\n        Email\n        <input\n          required\n          onBlur={e => handleValid(e)}\n          className={css.input_register}\n          type=\"email\"\n          name=\"email\"\n          onChange={handleEmailValidet}\n          value={email}\n        />\n      </label>\n      {passwordDirty && passwordError && (\n        <div style={{ color: 'red' }}>{passwordError}</div>\n      )}\n      <label className={css.label_register}>\n        Password\n        <input\n          required\n          onBlur={e => handleValid(e)}\n          className={css.input_register}\n          type=\"password\"\n          name=\"password\"\n          onChange={handlePasswordValidet}\n          value={password}\n        />\n      </label>\n      <button className={css.btn_register} type=\"submit\">\n        Register\n      </button>\n    </form>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nconst Register = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n};\nexport default Register;\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","emailDirty","setEmailDirty","passwordDirty","setPasswordDirty","nameDirty","setNameDirty","emailError","setEmailError","nameError","setNameError","passwordError","setPasswordError","dispatch","useDispatch","reset","handleValid","e","currentTarget","className","css","onSubmit","preventDefault","register","toast","position","duration","icon","style","border","borderRadius","background","color","autoComplete","required","onBlur","type","onChange","value","length","test","String","toLowerCase","Helmet"],"sourceRoot":""}